#include <bits/stdc++.h> 
using namespace std; 

#define ll  long long
#define pi pair<ll, ll> 
#define maxheap(dt) priority_queue<dt>
#define minheap(dt) priority_queue<dt, vector<dt>, greater<dt>>
#define nl cout << "\n";
#define ITER(i, a) for(auto i = a.begin(); i != a.end(); i++)
#define FOR(i, a, n) for(ll i = a; i < (n); i++)
#define NFOR(i, n, a) for(ll i = n-1; i >= a; i--)
#define NITER(i, a) for(auto i = a.end(); i != a.begin(); i--)
#define all(v) (v).begin(), (v).end()
#define twhile ll t; cin >> t; while(t--)
#define IOP freopen("test.txt", "r", stdin); freopen("output.txt", "w", stdout);
#define FIO ios_base::sync_with_stdio(false); cin.tie(NULL);

const ll dd = 3e5 + 7;
const ll mod = 1e9 + 7;  

/* ----------------------------------------------------------------------------------------------------*/

ll getInvCount(ll arr[], ll n) {
    multiset<ll> s;
    s.insert(arr[0]);
  
    ll invcount = 0; 
    
    FOR(i, 1, n) {
        s.insert(arr[i]);
        auto itr = s.upper_bound(arr[i]);
        invcount += distance(itr, s.end());
    }
  
    return invcount;
}

ll mergeUtil(ll arr[], ll temp[], ll left, ll mid, ll right)
{
    ll i, j, k, inv_count = 0;
    i = left; 
    j = mid; 
    k = left; 

    while ((i <= mid - 1) && (j <= right)) {
        if (arr[i] <= arr[j]) {
            temp[k++] = arr[i++];
        }
        else {
            temp[k++] = arr[j++];
            inv_count = inv_count + (mid - i);
        }
    }

    while (i <= mid - 1) temp[k++] = arr[i++];
    while (j <= right) temp[k++] = arr[j++];
 
    FOR(i, left, right+1) arr[i] = temp[i];
 
    return inv_count;
}

ll mergeSort(ll arr[], ll temp[], ll left, ll right) {
    ll inv_count = 0;
    if (right > left) {
        ll mid = left + (right - left) / 2;
 
        inv_count += mergeSort(arr, temp, left, mid);
        inv_count += mergeSort(arr, temp, mid + 1, right);
        inv_count += mergeUtil(arr, temp, left, mid + 1, right);
    }
    return inv_count;
}

void solve() {

    ll n;
    cin >> n;

    ll a[n], temp[n];
    FOR(i, 0, n) cin >> a[i]; 
    cout << mergeSort(a, temp, 0, n-1); nl
    cout << getInvCount(a, n); nl
    
}


/*-----------------------------------------------------------------------------------------------------*/

int main(){

    FIO
    IOP
    twhile 
        solve();
    return 0;
}


/*
2
5
2 4 1 3 5
5
2 3 4 5 6

3
0
*/

