#include <bits/stdc++.h> 
using namespace std; 

#define ll  long long
#define pi pair<ll, ll> 
#define maxheap(dt) priority_queue<dt>
#define minheap(dt) priority_queue<dt, vector<dt>, greater<dt>>
#define nl cout << "\n";
#define ITER(i, a) for(auto i = a.begin(); i != a.end(); i++)
#define FOR(i, a, n) for(ll i = a; i < (n); i++)
#define NFOR(i, n, a) for(ll i = n-1; i >= a; i--)
#define NITER(i, a) for(auto i = a.end(); i != a.begin(); i--)
#define all(v) (v).begin(), (v).end()
#define twhile ll t; cin >> t; while(t--)
#define IOP freopen("test.txt", "r", stdin); freopen("output.txt", "w", stdout);
#define FIO ios_base::sync_with_stdio(false); cin.tie(NULL);

const ll dd = 3e5 + 7;
const ll mod = 1e9 + 7;  

/* ----------------------------------------------------------------------------------------------------*/
// O(n) with O(n) space
void solve() {

    string s;
    cin >> s;
    ll n = s.size(), ans = 0, cnt = 0, pos = 0;

    vector<ll>v;
    FOR(i, 0, n) if(s[i] == '[') v.push_back(i);

    FOR(i, 0, n) {
        if(s[i] == '[') cnt++, pos++;
        if(s[i] == ']') cnt--;
        if(cnt < 0) {
            ans += v[pos] - i;
            swap(s[i], s[v[pos]]);
            pos++;
            cnt = 1;
        }
    }
    
    cout << ans;
    nl

}

// O(n) with O(1) space
void optimalsolve() {
    string s;
    cin >> s;
    ll n = s.size(), ans = 0, lt = 0, rt = 0, bal = 0;

    FOR(i, 0, n) {
        if(s[i] == '[') {
            lt++;
            if(bal > 0) {
                ans += bal;
                bal--;
            }
        }
        else {
            rt++;
            bal = rt - lt;
        }
    }

    cout << ans;
    nl

}

/*-----------------------------------------------------------------------------------------------------*/

int main(){

    FIO
    IOP
    twhile 
        solve();
        optimalsolve();
    return 0;
}

/*
3
[]]][[
[]][][
[[][]]

3
2
0
*/
