#include <bits/stdc++.h> 
using namespace std; 

#define ll  long long
#define pi pair<ll, ll> 
#define maxheap(dt) priority_queue<dt>
#define minheap(dt) priority_queue<dt, vector<dt>, greater<dt>>
#define nl cout << "\n";
#define ITER(i, a) for(auto i = a.begin(); i != a.end(); i++)
#define FOR(i, a, n) for(ll i = a; i < (n); i++)
#define NFOR(i, n, a) for(ll i = n-1; i >= a; i--)
#define NITER(i, a) for(auto i = a.end(); i != a.begin(); i--)
#define all(v) (v).begin(), (v).end()
#define twhile ll t; cin >> t; while(t--)
#define IOP freopen("test.txt", "r", stdin); freopen("output.txt", "w", stdout);
#define FIO ios_base::sync_with_stdio(false); cin.tie(NULL);

const ll dd = 3e5 + 7;
const ll mod = 1e9 + 7;  

/* ----------------------------------------------------------------------------------------------------*/

// similar code for Nearest Greater element to left/right and Max Area Histogram


void NSL(ll a[], ll n, vector<ll> &lt) {
    stack<pi>s;
    s.push(make_pair(a[0], 0));
    lt.push_back(-1);
    FOR(i, 1, n) {
        while(!s.empty() and s.top().first >= a[i]) s.pop();
        if(s.empty()) lt.push_back(-1);
        else lt.push_back(s.top().second);
        s.push(make_pair(a[i], i));
    }
}

void NSR(ll a[], ll n, vector<ll> &rt) {
    stack<pi>s;
    s.push(make_pair(a[n-1], n-1));
    rt.push_back(n);
    NFOR(i, n-1, 0) {
        while(!s.empty() and s.top().first >= a[i]) s.pop();
        if(s.empty()) rt.push_back(n);
        else rt.push_back(s.top().second);
        s.push(make_pair(a[i], i));
    }
    reverse(rt.begin(), rt.end());
}

void solve() {

    ll n;
    cin >> n;

    ll a[n], ans = 0;
    FOR(i, 0, n) cin >> a[i];

    vector<ll> lt, rt;
    NSR(a, n, rt);
    NSL(a, n, lt);

    FOR(i, 0, n) ans = max(ans, a[i]*(rt[i] - lt[i] - 1));

    cout << ans; nl

}

/*-----------------------------------------------------------------------------------------------------*/

int main(){

    FIO
    IOP
    twhile 
        solve();
    return 0;
}


/*
2
8
7 2 8 9 1 3 6 5
7
6 2 5 4 5 1 6

16
12

*/
